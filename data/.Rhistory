y = rnorm(10)
test = t.test(x,y)
nemas(test)
names(test)
set.seed(7)
pValue = vector()
for(i in 1:1000){
x = rnorm(10)
y = rnorm(10)
test = t.test(x,y)
pValue = c(pValue,test$p.value)
}
plot(pValue)
qqunif(pValue)
library("gap")
install.packages("gap")
library("gap")
qqunif(pValue)
rownames = c("Between Groups", "Within Groups", "Total")
colnames = c("Sum of Squares", "df", "Mean Square", "F-Statistic", "p-value")
SST = 0.4962^2*(sum(n)-1)
SSW = sum((n-1)*(sd^2))
SSB = SST - SSW
SumofSquares = c(SSB, SSW, SST)
df = c(8, 285, 293)
MeanSquare = SumofSquares/df
MeanSquare[3] = NA
FStatistic = MeanSquare[1]/MeanSquare[2]
pvalue = 1 - pf(FStatistic,8,285)
table = cbind(SumofSquares,df,MeanSquare,FStatistic,pvalue)
rownames(table) = rownames
colnames(table) = colnames
table[2:3,4:5] = NA
tableB = as.table(table)
tableB
rownames = c("Two Big Groups", "Others", "Between Groups")
colnames = c("Sum of Squares", "df", "Mean Square", "F-Statistic", "p-value")
BetweenGroups = table["Between Groups",]
BetweenGroups
BetweenGroups = table["Between Groups",]
WithinGroups = table["WithinGroups",]
BetweenGroups = table["Between Groups",]
WithinGroups = table["Within Groups",]
WithinGroups
BetweenGroups
rownames = c("Between Groups", "Two Big Groups", "Others")
colnames = c("Sum of Squares", "df", "Mean Square", "F-Statistic", "p-value")
BetweenGroups = table["Between Groups",]
n1 = n[1:6]
n2 = n[7:12]
mean1 = mean(mean[1:6]*n1)
mean2 = mean(mean[7:12]*n2)
meanT = mean(mean*n)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups = c(TwoBigGroups, 1, TwoBigGroups)
Others = BetweenGroups[1:2] - TwoBigGroups[1:2]
Others = c(Others, Others[1]/Others[2],NA,NA)
TwoBigGroups = c(TwoBigGroups, TwoBigGroups/Others[3], qf(TwoBigGroups/Others[3],1,Others[2]))
table1 =
1
table1 = rbind(BetweenGroups, TwoBigGroups, Others)
tableD1 = as.table(table1)
tableD1
n1 = n[1:6]
n2 = n[7:12]
mean1 = mean(mean[1:6]*n1)
mean2 = mean(mean[7:12]*n2)
meanT = mean(mean*n)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups
n = c(127,44,24,41,18,16,11,7,6)
mean = c(7.347, 7.368, 7.418, 7.487, 7.563, 7.568, 8.214, 8.272, 8.297)
sd = c(0.4979, 0.4235, 0.3955, 0.3183, 0.3111, 0.4649, 0.2963, 0.3242, 0.5842)
pooledEsd = sum((n-1)*(sd)^2)/sum(n-1)
rownames = c("Between Groups", "Within Groups", "Total")
colnames = c("Sum of Squares", "df", "Mean Square", "F-Statistic", "p-value")
SST = 0.4962^2*(sum(n)-1)
SSW = sum((n-1)*(sd^2))
SSB = SST - SSW
SumofSquares = c(SSB, SSW, SST)
df = c(8, 285, 293)
MeanSquare = SumofSquares/df
MeanSquare[3] = NA
FStatistic = MeanSquare[1]/MeanSquare[2]
pvalue = 1 - pf(FStatistic,8,285)
table = cbind(SumofSquares,df,MeanSquare,FStatistic,pvalue)
rownames(table) = rownames
colnames(table) = colnames
table[2:3,4:5] = NA
tableB = as.table(table)
rownames = c("Between Groups", "Two Big Groups", "Others")
colnames = c("Sum of Squares", "df", "Mean Square", "F-Statistic", "p-value")
BetweenGroups = table["Between Groups",]
n1 = n[1:6]
n2 = n[7:12]
mean1 = mean(mean[1:6]*n1)
mean2 = mean(mean[7:12]*n2)
meanT = mean(mean*n)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups
mean
n
BetweenGroups = table["Between Groups",]
n1 = n[1:6]
n2 = n[7:9]
mean1 = mean(mean[1:6]*n1)
mean2 = mean(mean[7:9]*n2)
meanT = mean(mean*n)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups
tableB
mean1
mean[1:6]*n1
BetweenGroups = table["Between Groups",]
n1 = n[1:6]
n2 = n[7:9]
mean1 = sum(mean[1:6]*n1)/sum(n1)
mean2 = sum(mean[7:9]*n2)/sum(n2)
meanT = mean(mean*n)
BetweenGroups = table["Between Groups",]
n1 = n[1:6]
n2 = n[7:9]
mean1 = sum(mean[1:6]*n1)/sum(n1)
mean2 = sum(mean[7:9]*n2)/sum(n2)
meanT = (mean*n)/sum(n)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups
mean1
meanT
meanT = sum(mean*n)/sum(n)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups = c(TwoBigGroups, 1, TwoBigGroups)
Others = BetweenGroups[1:2] - TwoBigGroups[1:2]
Others = c(Others, Others[1]/Others[2],NA,NA)
TwoBigGroups = c(TwoBigGroups, TwoBigGroups/Others[3], qf(TwoBigGroups/Others[3],1,Others[2]))
table1 = rbind(BetweenGroups, TwoBigGroups, Others)
tableD1 = as.table(table1)
tableD1
TwoBigGroups = c(TwoBigGroups, 1, TwoBigGroups)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups = c(TwoBigGroups, 1, TwoBigGroups)
Others = BetweenGroups[1:2] - TwoBigGroups[1:2]
Others = c(Others, Others[1]/Others[2],NA,NA)
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[3]/Others[3], qf(TwoBigGroups/Others[3],1,Others[2]))
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[3]/Others[3], qf(TwoBigGroups[3]/Others[3],1,Others[2]))
TwoBigGroups[3]/Others[3]
Others[2]
qf(TwoBigGroups[3]/Others[3],1,Others[2])
?qf
qf(66,1,Others[2])
qf(6,1,Others[2])
Others[2]
qf(6,1,7)
qf(6,6,39)
rownames = c("Between Groups", "Two Big Groups", "Others")
colnames = c("Sum of Squares", "df", "Mean Square", "F-Statistic", "p-value")
BetweenGroups = table["Between Groups",]
n1 = n[1:6]
n2 = n[7:9]
mean1 = sum(mean[1:6]*n1)/sum(n1)
mean2 = sum(mean[7:9]*n2)/sum(n2)
meanT = sum(mean*n)/sum(n)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups = c(TwoBigGroups, 1, TwoBigGroups)
Others = BetweenGroups[1:2] - TwoBigGroups[1:2]
Others = c(Others, Others[1]/Others[2],NA,NA)
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[3]/Others[3], 1-df(TwoBigGroups[3]/Others[3],1,Others[2]))
table1 = rbind(BetweenGroups, TwoBigGroups, Others)
tableD1 = as.table(table1)
tableD1
rownames = c("Between Groups", "Two Big Groups", "Others")
colnames = c("Sum of Squares", "df", "Mean Square", "F-Statistic", "p-value")
BetweenGroups = table["Between Groups",]
n1 = n[1:6]
n2 = n[7:9]
mean1 = sum(mean[1:6]*n1)/sum(n1)
mean2 = sum(mean[7:9]*n2)/sum(n2)
meanT = sum(mean*n)/sum(n)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups = c(TwoBigGroups, 1, TwoBigGroups)
Others = BetweenGroups[1:2] - TwoBigGroups[1:2]
Others = c(Others, Others[1]/Others[2],NA,NA)
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[3]/Others[3], 1-pf(TwoBigGroups[3]/Others[3],1,Others[2]))
table1 = rbind(BetweenGroups, TwoBigGroups, Others)
tableD1 = as.table(table1)
tableD1
rownames = c("Between Groups", "Within Groups", "Total")
colnames = c("Sum of Squares", "df", "Mean Square", "F-Statistic", "p-value")
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups = c(TwoBigGroups, 1)
Total = table["Total",]
WithinGroups = Total[1:2] - TwoBigGroups
WithinGroups = c(WithinGroups, WithinGroup[1]/WithinGroup[2],NA,NA)
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[1]/TwoBigGroups[2])
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[3]/WithinGroup[3],1-pf(TwoBigGroups[3]/WithinGroup[3],TwoBigGroups[2],WithinGroups[2]))
table2 = rbind(TwoBigGroups, WithinGroups, Total)
rownames(table2) = rownames
colnames(table2) = rownames
tableD2 = as.table(table2)
tableD2
WithinGroups = Total[1:2] - TwoBigGroups
WithinGroups = c(WithinGroups, WithinGroup[1]/WithinGroup[2],NA,NA)
Total = table["Total",]
WithinGroups = Total[1:2] - TwoBigGroups
WithinGroups = c(WithinGroups, WithinGroup[1]/WithinGroup[2],NA,NA)
TwoBigGroups = (mean1-meanT)^2*sum(n1) + (mean2-meanT)^2*sum(n2)
TwoBigGroups = c(TwoBigGroups, 1)
Total = table["Total",]
WithinGroups = Total[1:2] - TwoBigGroups
WithinGroups = c(WithinGroups, WithinGroups[1]/WithinGroups[2],NA,NA)
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[1]/TwoBigGroups[2])
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[3]/WithinGroup[3],1-pf(TwoBigGroups[3]/WithinGroup[3],TwoBigGroups[2],WithinGroups[2]))
table2 = rbind(TwoBigGroups, WithinGroups, Total)
rownames(table2) = rownames
colnames(table2) = rownames
tableD2 = as.table(table2)
tableD2
rownames(table2) = rownames
colnames(table2) = colnames
tableD2 = as.table(table2)
tableD2
1-pf(TwoBigGroups[3]/WithinGroup[3],TwoBigGroups[2],WithinGroups[2])
TwoBigGroups = c(TwoBigGroups, TwoBigGroups[3]/WithinGroups[3],1-pf(TwoBigGroups[3]/WithinGroups[3],TwoBigGroups[2],WithinGroups[2]))
table2 = rbind(TwoBigGroups, WithinGroups, Total)
rownames(table2) = rownames
colnames(table2) = colnames
tableD2 = as.table(table2)
tableD2
power = 1 - pt(qt(0.975, 57)-0.01/0.0214,57) + pt(qt(0.025, 57)-0.01/0.0214,57)
power
pt(qt(0.025, 57)-0.01/0.0214,57)
1 - pt(qt(0.975, 57)-0.01/0.0214,57)
library("Sleuth3")
attach(ex0430)
test = t.test(log(ex0403$Sunscreen),log(ex0403$PreTreatment))
ex0403
test = t.test(log(ex0403$Sunscreen),log(ex0403$PreTreatment))
library("Sleuth3")
attach(ex0430)
test = t.test(log(Sunscreen),log(PreTreatment))
test
CI = exp(test$conf.int)
CI
test$conf.int
test = t.test(log(Sunscreen),log(PreTreatment),paird=TRUE)
CI = exp(test$conf.int)
CI
test = t.test(log(Sunscreen),log(PreTreatment),paird=TRUE,var.equal = FALSE)
CI = exp(test$conf.int)
CI
test = t.test(log(ex0430$Sunscreen),log(ex0430$PreTreatment),paird=TRUE,var.equal = FALSE)
CI = exp(test$conf.int)
CI
library("Sleuth3")
attach(ex0430)
library("Sleuth3")
data(ex0430)
test = t.test(log(ex0430$Sunscreen),log(ex0430$PreTreatment),paird=TRUE,var.equal = FALSE)
CI = exp(test$conf.int)
CI
t.test
t
test
test = t.test(log(ex0430$Sunscreen),log(ex0430$PreTreatment),paired=TRUE)
CI = exp(test$conf.int)
CI
rm(list=ls())
library("Sleuth3")
Sleuth3Manual()
attach(ex0523)
str(ex0523)
?anova
?aov
ex0523
aov(Oxygen ~ Bone, ex0523)
anova(lm(Oxygen ~ Bone, ex0523))
attach(ex0525)
str(ex0525)
anova(lm(Income2005 ~ Educ, ex0525))
plot(ex0525["Income2005","12"])
ex0525["Income2005","12"]
ex0525["Income2005",12]
ex0525
str(ex0525)
plot(ex0525[Educ=="12","Income2005"])
plot(ex0525[Educ=="13-15","Income2005"])
plot(ex0525[Educ=="16","Income2005"])
qqnorm(ex0525[Educ=="12","Income2005"])
library("gap")
qqunif(ex0525[Educ=="12","Income2005"])
plot(epdf(ex0525[Educ=="12","Income2005"]))
plot(ecdf(ex0525[Educ=="12","Income2005"]))
hist(ex0525[Educ=="12","Income2005"])
hist(ex0525[Educ=="14","Income2005"])
str(ex0525)
hist(ex0525[Educ=="16","Income2005"])
hist(ex0525[Educ=="17","Income2005"])
hist(log(ex0525[Educ=="17","Income2005"]))
str(ex0525)
str(ex0525$Educ)
ex0525$Educ
t.test(ex0525[Educ=="12","Income2005"],ex0525[Educ=="13-15","Income2005"],alternative = "less")
t.test(ex0525[Educ=="13-15","Income2005"],ex0525[Educ=="16","Income2005"],alternative = "less")
t.test(ex0525[Educ=="16","Income2005"],ex0525[Educ=="1>16","Income2005"],alternative = "less")
t.test(ex0525[Educ=="16","Income2005"],ex0525[Educ==">16","Income2005"],alternative = "less")
attach(ex0612)
Sleuth3Manual()
attach(case0601)
str(case0601)
group = case0601$Handicap=="hearing"
group = case0601$Handicap=="hearing"
attach(case0601)
group = case0601$Handicap=="hearing"
library("Sleuth3")
attach(case0601)
group = case0601$Handicap=="hearing"
str(case0601)
t.test(Handicap~group)
str(group)
str(case0601)
case0601$Handicap
Sleuth3Manual()
total = case0601[Handicap!="None",]
total = case0601[Handicap!="None",]
hearing = total[Handicap=="Hearing",]
mobility = total[Handicap!="Hearing",]
t.test(hearing,mobility)
t.test(hearing$Score,mobility$Score)
mean(hearing$Score)
mean(mobility$Score)
mobility$Score
mobility
case0601
total = case0601[Handicap!="None",]
total
hearing = total[Handicap=="Hearing",]
hearing
mobility = total[Handicap!="Hearing",]
mobility
total
mobility = total[-Handicap=="Hearing",]
hearing = total[Handicap=="Hearing",]
mobility = total[!Handicap=="Hearing",]
mobility
total
str(total)
str(case0601)
total = case0601[Handicap!="None",]
str(total)
total
total[!Handicap=="Hearing",]
total[Handicap!="Hearing",]
mobility = total[Handicap=="Wheelchair",]
mobility
total$Handicap
mobility = total[Handicap=="Amputee",]
mobility
mobility = total[Handicap=="Crutches",]
mobility
hearing = total["Hearing",]
hearing
library("dplyr")
attach(case0601)
library("dplyr")
hearing = case0601 %>%
filter(Handicap==hearing) %>%
select(Score)
mobility = case0601 %>%
filter(Handicap!=hearing) %>%
select(Score)
?filter
hearing = case0601 %>%
filter(Handicap=="hearing") %>%
select(Score)
mobility = case0601 %>%
filter(Handicap!="hearing") %>%
select(Score)
hearing
hearing = case0601 %>%
filter(Handicap=="hearing")
hearing
case0601
hearing = case0601 %>%
filter(Handicap=="Hearing") %>%
select(Score)
mobility = case0601 %>%
filter(Handicap!="Hearing") %>%
select(Score)
hearing
t.test(hearing,mobility)
library(data.table)
library(dplyr)
library(XML)
addr <- 'HOP SHING RESTAURANT,CHATHAM SQUARE,MANHATTAN'  # set your address here
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep='')  # construct the URL
doc = xmlTreeParse(url)
root = xmlRoot(doc)
lat = xmlValue(root[['result']][['geometry']][['location']][['lat']])
long = xmlValue(root[['result']][['geometry']][['location']][['lng']])
lat
long
topFive = miceData %>%
group_by(Zip) %>%
summarise(miceNum = n()) %>%
arrange(desc(miceNum))
load("miceData.RData")
source("../lib/drawMap.R")
setwd("~/Data Science/project2-project2-group2/data")
load("miceData.RData")
source("../lib/drawMap.R")
topFive = miceData %>%
group_by(Zip) %>%
summarise(miceNum = n()) %>%
arrange(desc(miceNum))
View(topFive)
nrow(topFive)
class(addr)
names(miceData)
colsToKeep = c("DBA","STREET","BORO","CUISINE DESCRIPTION","ZIPCODE","SCORE")
resData = fread("restaurant.csv",select = colsToKeep)
resData = resData %>%
na.omit() %>%
mutate(addr = paste(DBA, STREET, BORO, sep = ",")) %>%
mutate(Latitude = getGps(addr)[1], Longitude = getGps(addr)[2])
getwe()
getwd()
colsToKeep = c("DBA","STREET","BORO","CUISINE DESCRIPTION","ZIPCODE","SCORE")
resData = fread("restaurants.csv",select = colsToKeep)
resData = resData %>%
na.omit() %>%
mutate(addr = paste(DBA, STREET, BORO, sep = ",")) %>%
mutate(Latitude = getGps(addr)[1], Longitude = getGps(addr)[2])
getGps = function(addr,g){
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep='')  # construct the URL
doc = xmlTreeParse(url)
root = xmlRoot(doc)
lat = xmlValue(root[['result']][['geometry']][['location']][['lat']])
log = xmlValue(root[['result']][['geometry']][['location']][['lng']])
return(c(lat,log))
}
colsToKeep = c("DBA","STREET","BORO","CUISINE DESCRIPTION","ZIPCODE","SCORE")
resData = fread("restaurants.csv",select = colsToKeep)
resData = resData %>%
na.omit() %>%
mutate(addr = paste(DBA, STREET, BORO, sep = ",")) %>%
mutate(Latitude = getGps(addr)[1], Longitude = getGps(addr)[2])
addr = 'MIDNIGHT EXPRESS,2 AVENUE,MANHATTAN'
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep='')  # construct the URL
doc = xmlTreeParse(url)
root = xmlRoot(doc)
lat = xmlValue(root[['result']][['geometry']][['location']][['lat']])
log = xmlValue(root[['result']][['geometry']][['location']][['lng']])
lat
long
resData = resData %>%
na.omit() %>%
mutate(addr = paste(DBA, STREET, BORO, sep = ","))
head(resData$addr)
addr = "MIDNIGHT EXPRESS,2 AVENUE,MANHATTAN"
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep='')  # construct the URL
doc = xmlTreeParse(url)
root = xmlRoot(doc)
lat = xmlValue(root[['result']][['geometry']][['location']][['lat']])
log = xmlValue(root[['result']][['geometry']][['location']][['lng']])
lat
long
getGps = function(addr,g){
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep='')  # construct the URL
doc = xmlTreeParse(url)
root = xmlRoot(doc)
lat = xmlValue(root[['result']][['geometry']][['location']][['lat']])
log = xmlValue(root[['result']][['geometry']][['location']][['lng']])
return(c(lat,log))
}
resData = resData %>%
na.omit() %>%
mutate(addr = paste(DBA, STREET, BORO, sep = ",")) %>%
mutate(Latitude = getGps(addr)[1], Longitude = getGps(addr)[2])
resData = resData %>%
na.omit() %>%
mutate(addr = paste(DBA, STREET, BORO, sep = ",")) %>%
mutate(Latitude = getGps(addr)[1], Longitude = getGps(addr)[2])
resData = resData %>%
na.omit() %>%
mutate(addr = paste(DBA, STREET, BORO, sep = ","))
play = mutate(resData,Latitude = getGps(addr)[1])
getGps(addr)
getGps(resData$addr[1:20])
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep='')  # construct the URL
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', resData$addr[1:15],'&sensor=false',sep='')  # construct the URL
url
doc = xmlTreeParse(url)
?doc
xmlTreeParse
?xmpTreeParse
?xmlTreeParse
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', resData$addr[1:2],'&sensor=false',sep='')  # construct the URL
doc = xmlTreeParse(url)
colsToKeep = c("DBA","STREET","BORO","CUISINE DESCRIPTION","ZIPCODE","SCORE")
resData = fread("restaurants.csv",select = colsToKeep)
resData = resData %>%
na.omit() %>%
mutate(addr = paste(DBA, STREET, BORO, sep = ","),url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep=''), doc = xmlTreeParse(url) , root = xmlRoot(doc) , Latitude = xmlValue(root[['result']][['geometry']][['location']][['lat']]), Longitude = xmlValue(root[['result']][['geometry']][['location']][['lng']]) )
play = c("MIDNIGHT EXPRESS,2 AVENUE,MANHATTAN","ANTALIA TURKISH CUISINE,WEST   45 STREET,MANHATTAN")
url = c("MIDNIGHT EXPRESS,2 AVENUE,MANHATTAN","ANTALIA TURKISH CUISINE,WEST   45 STREET,MANHATTAN")
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep='')  # construct the URL
url
addr = c("MIDNIGHT EXPRESS,2 AVENUE,MANHATTAN","ANTALIA TURKISH CUISINE,WEST   45 STREET,MANHATTAN")
url = paste('http://maps.google.com/maps/api/geocode/xml?address=', addr,'&sensor=false',sep='')  # construct the URL
url
doc = xmlTreeParse(url)
doc = xmlTreeParse(url[1])
